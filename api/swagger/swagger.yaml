swagger: '2.0'
info:
  version: 0.0.1
  title: FlockIt
host: 'localhost:3000'
basePath: /
tags:
  - {name: Service, description: 'Operations regarding the creation and administration of services.'}
  - {name: User, description: 'Operations regarding the creation and administration of users.'}
  - {name: Event, description: 'Operations regarding the creation and administration of events.'}
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
definitions:
  ServicesArray: {type: array, items: {type: object, required: [_id, tx_name], properties: {_id: {type: integer, format: uint32, example: 2}, tx_cif: {type: string, example: A05732B}, fk_provider: {type: integer, format: uint32, example: 1}, tx_name: {type: string, example: 'Test service'}, fk_headquarters: {type: integer, format: uint32, example: 1}, url_main_image: {type: [string, 'null']}, url_main_video: {type: [string, 'null']}, n_rating: {type: number, format: double, example: 3.8}}}}
  FetchedService: {type: object, required: [_id, tx_name], properties: {_id: {type: integer, format: uint32, example: 2}, tx_cif: {type: string, example: A05732B}, fk_provider: {type: integer, format: uint32, example: 1}, tx_name: {type: string, example: 'Test service'}, fk_headquarters: {type: integer, format: uint32, example: 1}, url_main_image: {type: [string, 'null']}, url_main_video: {type: [string, 'null']}, n_rating: {type: number, format: double, example: 3.8}}}
  Service: {type: object, required: [tx_name], properties: {tx_cif: {type: string, example: A05732B}, fk_provider: {type: integer, format: uint32, example: 1}, tx_name: {type: string, example: 'Test service'}, fk_headquarters: {type: integer, format: uint32, example: 1}, url_main_image: {type: [string, 'null']}, url_main_video: {type: [string, 'null']}}}
  UpdateService: {type: object, required: [_id], properties: {_id: {type: integer, format: uint32, example: 2}, tx_cif: {type: string, example: A05732B}, tx_name: {type: string, example: 'Test service'}, fk_headquarters: {type: integer, format: uint32, example: 1}, url_main_image: {type: [string, 'null']}, url_main_video: {type: [string, 'null']}}}
  UsersArray: {type: array, items: {type: object, required: [tx_email, fk_place], properties: {tx_email: {type: string, example: rubenlopezlozoya12@gmail.com}, tx_name: {type: string, example: Ruben}, url_profile_image: {type: string, example: /good_url.img}, tx_bio: {type: string, example: 'Test bio'}, tx_gender: {type: string, example: M}, dt_birthday: {type: string, format: dateTime, example: '1993-04-08T22:00:00.000Z'}, fk_place: {type: integer, format: uint32, example: 1}, n_rating: {type: number, format: double, example: 3.2}}}}
  FetchedUser: {type: object, required: [tx_email, fk_place], properties: {tx_email: {type: string, example: rubenlopezlozoya12@gmail.com}, tx_name: {type: string, example: Ruben}, url_profile_image: {type: string, example: /good_url.img}, tx_bio: {type: string, example: 'Test bio'}, tx_gender: {type: string, example: M}, dt_birthday: {type: string, format: dateTime, example: '1993-04-08T22:00:00.000Z'}, fk_place: {type: integer, format: uint32, example: 1}, n_rating: {type: number, format: double, example: 3.2}}}
  RegisterUserObject: {type: object, required: [tx_name, tx_email, tx_password, dt_birthday], properties: {tx_email: {type: string, example: rubenlopezlozoya12@gmail.com}, tx_name: {type: string, example: Ruben}, tx_password: {type: string, example: Ruben1234}, tx_gender: {type: string, example: M}, dt_birthday: {type: string, format: dateTime, example: '1993-04-08T22:00:00.000Z'}, fk_place: {type: integer, format: uint32, example: 1}}}
  CreateUserResponse: {type: object, required: [userId], properties: {userId: {type: integer, format: uint32}}}
  CreateServiceResponse: {type: object, required: [serviceId], properties: {serviceId: {type: integer, format: uint32}}}
  Error: {required: [message], properties: {message: {type: string}}}
  LoginForm: {type: object, required: [tx_email, tx_password], properties: {tx_email: {type: string, example: rubenlopezlozoya12@gmail.com}, tx_password: {type: string, example: Ruben1234}}}
  LoginResponse: {type: object, required: [token], properties: {token: {type: string}}}
  UpdateResponse: {type: object, properties: {fieldCount: {type: integer, format: uint32}, affectedRows: {type: integer, format: uint32}, insertId: {type: integer, format: uint32}, serverStatus: {type: integer, format: uint32}, warningCount: {type: integer, format: uint32}, message: {type: string}, protocol41: {type: boolean}, changedRows: {type: integer, format: uint32}}}
securityDefinitions:
  Authorization: {description: 'Authentication token for restricted operations', type: apiKey, name: Authorization, in: header}
paths:
  /service: {x-swagger-router-controller: service, post: {tags: [Service], description: 'Creates a service', operationId: createService, security: [{Authorization: []}], parameters: [{in: body, name: body, description: 'Service object that needs to be added to the database', required: true, schema: {type: object, required: [tx_name], properties: {tx_cif: {type: string, example: A05732B}, fk_provider: {type: integer, format: uint32, example: 1}, tx_name: {type: string, example: 'Test service'}, fk_headquarters: {type: integer, format: uint32, example: 1}, url_main_image: {type: [string, 'null']}, url_main_video: {type: [string, 'null']}}}}], responses: {'200': {description: Success, schema: {type: object, required: [serviceId], properties: {serviceId: {type: integer, format: uint32}}}}, '500': {description: Error, schema: {required: [message], properties: {message: {type: string}}}}}}}
  /service/update: {x-swagger-router-controller: service, put: {tags: [Service], description: 'Updates a service', operationId: updateService, security: [{Authorization: []}], parameters: [{in: body, name: body, description: 'Updates the service passed in the body', required: true, schema: {type: object, required: [_id], properties: {_id: {type: integer, format: uint32, example: 2}, tx_cif: {type: string, example: A05732B}, tx_name: {type: string, example: 'Test service'}, fk_headquarters: {type: integer, format: uint32, example: 1}, url_main_image: {type: [string, 'null']}, url_main_video: {type: [string, 'null']}}}}], responses: {'200': {description: Success, schema: {type: object, properties: {fieldCount: {type: integer, format: uint32}, affectedRows: {type: integer, format: uint32}, insertId: {type: integer, format: uint32}, serverStatus: {type: integer, format: uint32}, warningCount: {type: integer, format: uint32}, message: {type: string}, protocol41: {type: boolean}, changedRows: {type: integer, format: uint32}}}}, '404': {description: 'Service not found', schema: {required: [message], properties: {message: {type: string}}}}, '500': {description: Error, schema: {required: [message], properties: {message: {type: string}}}}}}}
  '/service/findByProvider/{providerId}': {x-swagger-router-controller: service, get: {tags: [Service], parameters: [{name: providerId, in: path, required: true, type: integer, format: uint32}], description: 'Retrieves an array of services offered by an active provider', operationId: findServiceByProvider, responses: {'200': {description: Success, schema: {type: array, items: {type: object, required: [_id, tx_name], properties: {_id: {type: integer, format: uint32, example: 2}, tx_cif: {type: string, example: A05732B}, fk_provider: {type: integer, format: uint32, example: 1}, tx_name: {type: string, example: 'Test service'}, fk_headquarters: {type: integer, format: uint32, example: 1}, url_main_image: {type: [string, 'null']}, url_main_video: {type: [string, 'null']}, n_rating: {type: number, format: double, example: 3.8}}}}}, '404': {description: 'Service not found', schema: {required: [message], properties: {message: {type: string}}}}, '500': {description: Error, schema: {required: [message], properties: {message: {type: string}}}}}}}
  '/user/{userId}': {x-swagger-router-controller: user, get: {tags: [User], parameters: [{name: userId, in: path, required: true, type: integer, format: uint32}], description: 'Retrieves a user', operationId: findById, responses: {'200': {description: Success, schema: {type: array, items: {type: object, required: [tx_email, fk_place], properties: {tx_email: {type: string, example: rubenlopezlozoya12@gmail.com}, tx_name: {type: string, example: Ruben}, url_profile_image: {type: string, example: /good_url.img}, tx_bio: {type: string, example: 'Test bio'}, tx_gender: {type: string, example: M}, dt_birthday: {type: string, format: dateTime, example: '1993-04-08T22:00:00.000Z'}, fk_place: {type: integer, format: uint32, example: 1}, n_rating: {type: number, format: double, example: 3.2}}}}}, '404': {description: 'User not found', schema: {required: [message], properties: {message: {type: string}}}}, '500': {description: Error, schema: {required: [message], properties: {message: {type: string}}}}}}}
  /user: {x-swagger-router-controller: user, post: {tags: [User], description: 'Register a user', operationId: createUser, parameters: [{in: body, name: body, description: 'User object to be registered in the database', required: true, schema: {type: object, required: [tx_name, tx_email, tx_password, dt_birthday], properties: {tx_email: {type: string, example: rubenlopezlozoya12@gmail.com}, tx_name: {type: string, example: Ruben}, tx_password: {type: string, example: Ruben1234}, tx_gender: {type: string, example: M}, dt_birthday: {type: string, format: dateTime, example: '1993-04-08T22:00:00.000Z'}, fk_place: {type: integer, format: uint32, example: 1}}}}], responses: {'200': {description: Success, schema: {type: object, required: [userId], properties: {userId: {type: integer, format: uint32}}}}, '409': {description: 'Email already exists', schema: {required: [message], properties: {message: {type: string}}}}, '500': {description: Error, schema: {required: [message], properties: {message: {type: string}}}}}}}
  /auth/login: {x-swagger-router-controller: authentication, post: {tags: [Authentication], description: 'Logs in a registered user', operationId: login, parameters: [{in: body, name: body, description: 'Credentials of a registered user (email & password)', required: true, schema: {type: object, required: [tx_email, tx_password], properties: {tx_email: {type: string, example: rubenlopezlozoya12@gmail.com}, tx_password: {type: string, example: Ruben1234}}}}], responses: {'200': {description: Success, schema: {type: object, required: [token], properties: {token: {type: string}}}}, '404': {description: 'User not found', schema: {required: [message], properties: {message: {type: string}}}}, '500': {description: Error, schema: {required: [message], properties: {message: {type: string}}}}}}}
  /swagger: {x-swagger-pipe: swagger_raw}
